package $sourceClass.packageName();

$imports

#set ($simpleClassName = $imports.use($targetClass.name()))##
#set ($sourceClassName = $sourceClass.name())##
#parse("class-literal.java.vm")


/**
 * Generated from $sourceClass.name()
 */
@$[javax.annotation.Generated]("$processorClass.name()")
#if ($hasModuleName)
@$[com.slimgears.rxrpc.core.RxRpcModule](name = "$moduleName", endpointClass = $[$sourceClass.erasureName()].class)
#end
#if ($autoService)##
@$[com.google.auto.service.AutoService]($[com.slimgears.rxrpc.server.EndpointRouter.Module].class)
#end
public class $simpleClassName implements $[com.slimgears.rxrpc.server.EndpointRouter.Module] {
#foreach ($m in $methods)##
    #set ($methodName = $m.name())##
    #set ($returnType = $m.returnType())##
    #set ($elementType = $utils.elementType($returnType))
    private final static $[com.slimgears.rxrpc.server.internal.MethodDispatcher]<$[$sourceClassName], $[$elementType.asBoxed()]> $methodName = (resolver, target, args) ->
        $[com.slimgears.rxrpc.server.internal.Publishers].toPublisher(target.$methodName(##
    #foreach ($p in $m.params())##

            args.get("$p.name()", #classLiteral($p.type()))##
        #if ($foreach.hasNext),#end##
    #end));

#end

    private final static $[com.slimgears.rxrpc.server.EndpointRouter] router = $[com.slimgears.rxrpc.server.EndpointRouters]
        .builder($[$sourceClassName].class)
#foreach($m in $methods)
        .method("$m.name()", $m.name()#foreach ($p in $m.params()), $[$p.type().erasureName()].class#end)
#end
        .build();

    @Override
    public void configure($[com.slimgears.rxrpc.server.EndpointRouter.Configuration] configuration) {
        configuration.addRouter("$endpointName", router);
    }
}
