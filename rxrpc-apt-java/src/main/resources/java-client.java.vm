package $sourceClass.packageName();

$imports
#parse("class-literal.java.vm")

#set ($simpleClassName = $imports.use($targetClass.name()))
#macro (invoke $method)##
    #set ($type = $method.returnType())
    #set ($asyncType = "Blocking")
    #set ($returnType = $type)
    #if ($utils.isKnownAsyncType($type))
        #set ($asyncType = $type.simpleName())
        #set ($returnType = $type.elementTypeOrVoid())
    #end
        invoke${asyncType}(InvocationInfo
            .builder(#classLiteral($returnType))
            .method("$endpointName/$method.name()")
            .shared($utils.isShared($method))
            .sharedReplayCount($utils.getSharedReplayCount($method))
##
    #foreach($p in $method.params())
            .arg("$p.name()", $p.name())
    #end
        .build())##
#end##

#macro (annotate $annotations)##
    #foreach($a in $annotations)$a.asString()#if ($foreach.hasNext) #end#end##
#end##

#macro (params $method)##
    #foreach ($p in $m.params())#annotate($p.annotations()) $[$p.type()] $p.name()#if ($foreach.hasNext), #{end}#end
#end

/**
 * Generated from $sourceClass.name()
 */
@$[javax.annotation.Generated]("$processorClass.name()")
public class $simpleClassName extends $[com.slimgears.rxrpc.client.AbstractClient] #if($isInterface)implements $[$sourceClass]#end {
    public $simpleClassName($[com.slimgears.rxrpc.client.RxClient.Session] session) {
        super(session);
    }

#foreach ($m in $methods)##
    #set ($returnType = $m.returnType())##
    #set ($elementType = $imports.use($returnType.elementTypeOrSelf()))##
    #if ($isInterface)##

    @Override
##
    #end
    public $[$m.returnType()] $m.name()(#params($m)) {
        #if ($m.returnType() != "void")
        return #invoke($m);
        #else
        #invoke($m);
        #end
    }

#end
}
