import {InjectionToken, ModuleWithProviders, NgModule, Type} from '@angular/core';
import {RxRpcClient, RxRpcInvoker, RxRpcTransport, RxRpcClientOptions} from 'rxrpc-js';
#foreach($c in $classes)
import { $c.name() } from './$utils.camelCaseToDash($c.name())';
#end

@NgModule({
    providers: [
#foreach($c in $classes)
        ${c.name()}.provider(${ngModuleName}.RxRpcInvoker)#if($foreach.hasNext),#end

#end
    ]
})
export class $ngModuleName {
    public static readonly RxRpcInvoker = new InjectionToken<RxRpcInvoker>('${ngModuleName}.RxRpcInvoker');

    public static withTransport(transportToken: Type<RxRpcTransport>|InjectionToken<RxRpcTransport>, options?: RxRpcClientOptions): ModuleWithProviders<$ngModuleName> {
        return {
            ngModule: $ngModuleName,
            providers: [{
                provide: ${ngModuleName}.RxRpcInvoker,
                useFactory: transport => ${ngModuleName}.invokerFactory(transport, options),
                deps: [transportToken]
            }]
        };
    }

    public static invokerFactory(transport: RxRpcTransport, options?: RxRpcClientOptions) {
        return new RxRpcClient(transport, options);
    }
}
