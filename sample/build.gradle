buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:6.0.0-m2"
    }
}

apply plugin: "io.freefair.lombok"

apply from: "$scriptsDir/java.gradle"
apply from: "$scriptsDir/nodejs.gradle"

def nodeProjectDir = project.file("$project.projectDir/frontend")
node {
    it.nodeProjectDir = nodeProjectDir
}

compileJava.options.compilerArgs = [
        "-Arxrpc.ts.typemaps=$projectDir/src/main/typemap/types.properties",
        '-Arxrpc.ts.ngmodule',
        '-Arxrpc.ts.ngmodule.name=BackendApiModule'
]

import groovy.json.JsonSlurper



def rxRpcJsPackTask = project(':rxrpc-js').tasks.yarnPack
def rxRpcJsPackage = rxRpcJsPackTask.outputs.files.first()
def packageJson = new JsonSlurper().parse file("$nodeProjectDir/package.json")
def isRxRpcJsInstalled = packageJson.dependencies.'rxrpc-js' != null

task removeRxRpcJs(type: YarnTask, group: 'yarn', dependsOn: rxRpcJsPackTask) {
    onlyIf { isRxRpcJsInstalled && rxRpcJsPackTask.didWork }
    inputs.file rxRpcJsPackage
    args = ["remove", "rxrpc-js", "--offline", "--mode=skip-build"]
}

task cleanRxRpcCache(type: YarnTask, group: 'yarn', dependsOn: tasks.removeRxRpcJs) {
    onlyIf { isRxRpcJsInstalled && rxRpcJsPackTask.didWork }
    inputs.file rxRpcJsPackage
    args = ["cache", "clean", "--pattern", "rxrpc-js.*"]
}

task installRxRpcJs(type: YarnTask, dependsOn: tasks.yarn, group: 'yarn') {
    inputs.file rxRpcJsPackage
    onlyIf { rxRpcJsPackTask.didWork }
    def relativePath = project.file('frontend').relativePath(rxRpcJsPackage as File)
    args = ["add", "file:$relativePath", "--network-timeout", "600000"]
}

yarn {
    dependsOn rxRpcJsPackTask
    it.args.addAll provider {["--network-timeout", "600000"]}
}

task syncBackendApi(type: Sync, dependsOn: compileJava) {
    from fileTree(dir: "$project.buildDir/generated/source/apt/main/typescript", include: '*.ts')
    into file("$nodeProjectDir/src/backend-api")
}

task yarnCleanCache(type: YarnTask) {
    args = ['cache', 'clean']
}

clean.dependsOn(yarnCleanCache)

yarnBuild {
    it.dependsOn(cleanRxRpcCache, yarn, installRxRpcJs, syncBackendApi)
    it.inputs.files file("$nodeProjectDir/angular.json"), file("$nodeProjectDir/package.json")
    it.inputs.files fileTree("$nodeProjectDir/src")
    it.outputs.files fileTree("$buildDir/resources/main/web")
}

dependencies {
    annotationProcessor project(':rxrpc-apt-typescript')
    annotationProcessor project(':rxrpc-apt-java')
    implementation project(':rxrpc-core')
    implementation project(':rxrpc-jetty')

    implementation libs.rxJava
    implementation libs.jacksonCore
    implementation libs.jacksonDataBind
    implementation libs.jacksonAnnotations
    implementation libs.slimGenericUtils

    implementation libs.jettyServer, libs.jettyServlet

    testImplementation libs.commonsIo, libs.junit, libs.mockito
    compileOnly libs.autoValueAnnotations
    annotationProcessor libs.autoValue

    implementation libs.slf4jSimple
}
