buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:6.0.0-m2"
    }
}

apply plugin: "io.freefair.lombok"

apply from: "$scriptsDir/java.gradle"
apply from: "$scriptsDir/nodejs.gradle"

def nodeProjectDir = project.file("$project.projectDir/frontend")
node {
    it.nodeProjectDir = nodeProjectDir
}

compileJava.options.compilerArgs = [
        "-Arxrpc.ts.typemaps=$projectDir/src/main/typemap/types.properties",
        '-Arxrpc.ts.ngmodule',
        '-Arxrpc.ts.ngmodule.name=BackendApiModule'
]

import groovy.json.JsonSlurper

task reinstallRxRpcJs(group: 'yarn') {
    task removeRxRpcJs(type: YarnTask, group: 'yarn') {
        onlyIf {
            def packageJson = new JsonSlurper().parse file("$nodeProjectDir/package.json")
            return !project(':rxrpc-js').tasks.yarnPack.state.upToDate && packageJson.dependencies.hasProperty('rxrpc-js')
        }
        args = ["remove", "rxrpc-js", "--offline"]
    }
    task cleanRxRpcCache(type: YarnTask, group: 'yarn', dependsOn: tasks.removeRxRpcJs) {
        onlyIf {
            return !project(':rxrpc-js').tasks.yarnPack.state.upToDate
        }
        args = ["cache", "clean", "--pattern", "rxrpc-js.*"]
    }
    task installRxRpcJs(type: YarnTask, dependsOn: project(':rxrpc-js').tasks.yarnPack, group: 'yarn') {
        onlyIf {
            return !project(':rxrpc-js').tasks.yarnPack.state.upToDate
        }
        inputs.files project(':rxrpc-js').tasks.yarnPack.outputs.files
        args = ["add", "file:../../rxrpc-js/build/rxrpc-js.tgz", "--network-timeout", "600000"]
    }
    dependsOn tasks.cleanRxRpcCache, tasks.installRxRpcJs
}

yarn {
    it.dependsOn tasks.reinstallRxRpcJs
    it.args.addAll provider {["--network-timeout", "600000"]}
}

task syncBackendApi(type: Sync) {
    dependsOn(compileJava)
    from fileTree(dir: "$project.buildDir/generated/source/apt/main/typescript", include: '*.ts')
    into file("$nodeProjectDir/src/backend-api")
}

task yarnCleanCache(type: YarnTask) {
    args = ['cache', 'clean']
}

clean.dependsOn(yarnCleanCache)

yarn.dependsOn project(':rxrpc-js').tasks.yarnPack

yarnBuild {
    it.dependsOn(yarn, syncBackendApi)
    it.inputs.files file("$nodeProjectDir/angular.json"), file("$nodeProjectDir/package.json")
    it.inputs.files fileTree("$nodeProjectDir/src")
    it.outputs.files fileTree("$buildDir/resources/main/web")
}

dependencies {
    annotationProcessor project(':rxrpc-apt-typescript')
    annotationProcessor project(':rxrpc-apt-java')
    implementation project(':rxrpc-core')
    implementation project(':rxrpc-jetty')

    implementation libs.rxJava
    implementation libs.jacksonCore
    implementation libs.jacksonDataBind
    implementation libs.jacksonAnnotations
    implementation libs.slimGenericUtils

    implementation libs.jettyServer, libs.jettyServlet

    testImplementation libs.commonsIo, libs.junit, libs.mockito
    compileOnly libs.autoValueAnnotations
    annotationProcessor libs.autoValue
}
